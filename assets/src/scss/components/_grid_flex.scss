/**
 * The Kickoff Flexbox Grid
 * =================================
 * Default grid styles
 * Media queries
 */

/* Import Grid helpers and mixins */
@import "../mixins/grid-helpers";


/**
 * Basic Usage:
 * =================================
	<div class="g">
		<div class="g-col g-span4 g-span6--mid"></div>
		<div class="g-col g-span8 g-span6--mid"></div>
	</div>
 */
.g {
	display: flex;
	flex-wrap: wrap;
	flex-direction: row;
}

	.g-col {
		display: block;
		flex: 1 0 0; // By default, evenly distribute columns – n.b. to support non-flexbox browsers, you should always add .g-spanx

		.g--stacked > & {
			flex-basis: 100%;
		}

		@if $use-legacy-grid {
			.no-flexbox & {
				float: left;
			}
		}
	}


/**
 * Gutter calcs – applied to grid columns in our grid (direct descendants only)
 * Default: pixels (can look at changing to percentage)
 * Usage: gutterCalc() or gutterCalc(false)
 */
$g-gutter-half: $grid-gutter-width / 2;

.g--gutter {
	margin-left: - $g-gutter-half + px;
	margin-right: - $g-gutter-half + px;

	& > .g-col {
		margin-left: $g-gutter-half + px;
		margin-right: $g-gutter-half + px;
	}
}

/**
 * .g--equalHeight – Equal Height Child Elements
 */
.g--equalHeight {
	> .g-col {
		display: flex;

		& > * {
			flex-basis: 100%;
		}
	}
}

/**
 * Alignment
 * Modifier classes to move our grid elements around
 */
.g--alignBottom    { align-items: flex-end; }
.g--alignRight     { justify-content: flex-end; }
.g--alignCenter    { justify-content: center; }
.g--alignCenter--v { align-items: center; }

/**
 * Centering
 * Centers an individual column, rather than the entire grid
 */
.g-col--centered {
	margin: 0 auto;
}


/**
 * Span classes (for different breakpoints)
 */

// Default sizes
@include gridSpanHelper;

@if $responsive-grid-sizes {
	//loop through our breakpoints
	@each $name, $value in $breakpoints {
		@include respond-min($value) {
			@include gridSpanHelper($name);
		}
	}
}

@each $name, $value in $breakpoints {
	.g--stack--#{$name} {
		@include grid-stack($value);
	}
}
